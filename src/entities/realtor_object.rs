//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "realtor_object"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]

pub struct Model {
    pub id: Uuid,
    pub name: String,
    pub phone: String,
    pub full_name: String,
    pub metro_station: String,
    pub metro_distance: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    Phone,
    FullName,
    MetroStation,
    MetroDistance,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Picture,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::Name => ColumnType::String(StringLen::None).def(),
            Self::Phone => ColumnType::String(StringLen::None).def(),
            Self::FullName => ColumnType::String(StringLen::None).def(),
            Self::MetroStation => ColumnType::String(StringLen::None).def(),
            Self::MetroDistance => ColumnType::Float.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Picture => Entity::has_many(super::picture::Entity).into(),
        }
    }
}

impl Related<super::picture::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Picture.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
