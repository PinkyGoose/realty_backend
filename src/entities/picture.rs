//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "picture"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: Uuid,
    pub realtor_object_id: Uuid,
    pub original: Vec<u8>,
    pub thumbnail: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    RealtorObjectId,
    Original,
    Thumbnail,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    RealtorObject,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::RealtorObjectId => ColumnType::Uuid.def(),
            Self::Original => ColumnType::VarBinary(StringLen::None).def(),
            Self::Thumbnail => ColumnType::VarBinary(StringLen::None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::RealtorObject => Entity::belongs_to(super::realtor_object::Entity)
                .from(Column::RealtorObjectId)
                .to(super::realtor_object::Column::Id)
                .into(),
        }
    }
}

impl Related<super::realtor_object::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RealtorObject.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
