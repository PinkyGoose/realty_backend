//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

use sea_orm::{
    entity::prelude::*,
    ActiveValue,
    ActiveValue::{NotSet, Set},
    IntoActiveModel, IntoActiveValue,
};
use serde::{
    de::{self, Visitor},
    Deserialize, Deserializer, Serialize, Serializer,
};
use std::fmt;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "picture")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub realtor_object_id: Uuid,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub original: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub thumbnail: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::realtor_object::Entity",
        from = "Column::RealtorObjectId",
        to = "super::realtor_object::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RealtorObject,
}

impl Related<super::realtor_object::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RealtorObject.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
